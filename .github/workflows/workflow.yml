name: Deploy Lambda Function

on:
  push:
    branches: [ main, release/* ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: FiapLumiereMediaProcessorLambda
  DEPENDENCY_LAYER_NAME: VideoExtractorDependencies
  PYTHON_VERSION: '3.9'
  DIST_DIR: dist
  S3_BUCKET: fiap-lumiere-lambda-code-bucket

permissions:
  contents: read
  id-token: write

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check src/
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src/ --cov-report=html
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: htmlcov/
        retention-days: 7

  build-and-deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Build Lambda Layer and Function
      run: |
        # Make deploy script executable
        chmod +x bin/deploy.sh
        
        # Use deploy script to build both layer and function
        ./bin/deploy.sh build
    
    - name: Upload artifacts to S3
      run: |
        # Create S3 keys with timestamp for versioning
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        LAYER_S3_KEY="layers/lambda-layer-${TIMESTAMP}.zip"
        FUNCTION_S3_KEY="functions/lambda-function-${TIMESTAMP}.zip"
        
        # Upload layer zip to S3
        aws s3 cp ${{ env.DIST_DIR }}/lambda-layer.zip s3://${{ env.S3_BUCKET }}/$LAYER_S3_KEY
        
        # Upload function zip to S3
        aws s3 cp ${{ env.DIST_DIR }}/lambda-function.zip s3://${{ env.S3_BUCKET }}/$FUNCTION_S3_KEY
        
        # Store S3 keys for deployment
        echo $LAYER_S3_KEY > .layer_s3_key
        echo $FUNCTION_S3_KEY > .function_s3_key
        
        # Output for next steps
        echo "LAYER_S3_KEY=$LAYER_S3_KEY" >> $GITHUB_ENV
        echo "FUNCTION_S3_KEY=$FUNCTION_S3_KEY" >> $GITHUB_ENV
    
    - name: Update Lambda Layer
      id: update-layer
      run: |
        # Deploy layer from S3
        LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name ${{ env.DEPENDENCY_LAYER_NAME }} \
          --description "Dependencies for FIAP Lumiere Media Processor Lambda - $(date)" \
          --content S3Bucket=${{ env.S3_BUCKET }},S3Key=$LAYER_S3_KEY \
          --compatible-runtimes python3.9 \
          --query 'LayerVersionArn' \
          --output text)
        
        echo "New layer version: $LAYER_ARN"
        echo "layer_version_arn=$LAYER_ARN" >> $GITHUB_OUTPUT
    
    - name: Update Lambda Function Code
      run: |
        # Update function code from S3
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --s3-bucket ${{ env.S3_BUCKET }} \
          --s3-key $FUNCTION_S3_KEY
        
        # Wait for the update to complete
        aws lambda wait function-updated \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
    
    - name: Update Lambda Function Configuration
      run: |
        # Update function configuration to use the new layer version
        aws lambda update-function-configuration \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --layers ${{ steps.update-layer.outputs.layer_version_arn }}
        
        # Wait for the configuration update to complete
        aws lambda wait function-updated \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
    
    - name: Verify Deployment
      run: |
        # Get function information to verify deployment
        FUNCTION_INFO=$(aws lambda get-function \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query 'Configuration.[FunctionName,Runtime,Handler,LastModified]' \
          --output table)
        
        echo "Function deployment verified:"
        echo "$FUNCTION_INFO"
        
        # Test function (optional - remove if not needed)
        echo "Testing function invocation..."
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload '{"Records":[{"body":"{\"test\":true}"}]}' \
          --log-type Tail \
          response.json || echo "Test invocation failed - this is expected if the function requires specific SQS message format"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-deployment-artifacts
        path: |
          ${{ env.DIST_DIR }}/lambda-function.zip
          ${{ env.DIST_DIR }}/lambda-layer.zip
        retention-days: 30
