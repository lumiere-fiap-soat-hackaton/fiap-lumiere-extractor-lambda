name: Deploy Lambda Function

on:
  push:
    branches: [ main, release/* ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: FiapLumiereMediaProcessorLambda
  DEPENDENCY_LAYER_NAME: VideoExtractorDependencies
  PYTHON_VERSION: '3.9'
  DIST_DIR: dist
  S3_BUCKET: fiap-lumiere-lambda-code-bucket

permissions:
  contents: read
  id-token: write

jobs:
  build-and-test:
    name: Construir Artefato, Executar Testes e Analisar Cobertura
    runs-on: ubuntu-latest

    steps:
      - name: Realizar Checkout do C√≥digo-fonte
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Executar testes e gerar cobertura

        run: |
          python -m pytest tests/ -v --cov=src/ --cov-report=xml --cov-report=html

      - name: Configurar Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar SonarScanner

        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner.zip -d $HOME
          echo "$HOME/sonar-scanner-4.8.0.2856-linux/bin" >> $GITHUB_PATH    

      - name: Enviar cobertura ao SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

        run: |
          export PATH=$JAVA_HOME/bin:$PATH
          export SONAR_SCANNER_OPTS="-Djava.home=$JAVA_HOME"
          sonar-scanner \
            -Dsonar.projectKey=lumiere-fiap-soat-hackaton_fiap-lumiere-extractor-lambda \
            -Dsonar.organization=lumiere-fiap-soat-hackaton \
            -Dsonar.sources=src \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.scanner.metadataFilePath=$SCANNER_META_PATH \
            -Dsonar.coverage.exclusions=**/common/**,**/__test__/**,**/main.py,**/configuration.py

      - name: Validar Quality Gate do SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

        run: |
          echo "Aguardando an√°lise do SonarCloud finalizar..."

          PROJECT_KEY="lumiere-fiap-soat-hackaton_fiap-lumiere-extractor-lambda"
          META_PATH="$(pwd)/.scanner-meta.properties"

          TASK_ID=$(grep ceTaskId "$META_PATH" | cut -d'=' -f2)

          if [ -z "$TASK_ID" ]; then
            echo "‚ùå N√£o foi poss√≠vel encontrar ceTaskId. A an√°lise pode ter falhado."
            exit 1
          fi

          STATUS="PENDING"
          while [ "$STATUS" != "SUCCESS" ] && [ "$STATUS" != "FAILED" ]; do
            echo "‚è≥ Status da an√°lise: $STATUS"
            sleep 5
            STATUS=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/ce/task?id=$TASK_ID" | jq -r '.task.status')
          done

          if [ "$STATUS" != "SUCCESS" ]; then
            echo "‚ùå A an√°lise falhou no SonarCloud (status: $STATUS)"
            exit 1
          fi

          ANALYSIS_ID=""
          while [ -z "$ANALYSIS_ID" ] || [ "$ANALYSIS_ID" == "null" ]; do
            echo "‚è≥ Aguardando analysisId da task..."
            sleep 3
            ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/ce/task?id=$TASK_ID" | jq -r '.task.analysisId')
          done

          echo "üîç Validando Quality Gate para an√°lise $ANALYSIS_ID..."

          QUALITY_GATE_STATUS=$(curl -s -u $SONAR_TOKEN: \
            "$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
            | jq -r '.projectStatus.status')

          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo -e "\n‚ùå Quality Gate falhou! Detalhes:"
            curl -s -u $SONAR_TOKEN: \
              "$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
              | jq -r '.projectStatus.conditions[] | select(.status != "OK") | "- Crit√©rio: \(.metric)\n  Valor atual: \(.actual // \"n/a\")\n  Status: \(.status)\n"'
            echo -e "\nüîó Ver detalhes: $SONAR_HOST_URL/dashboard?id=$PROJECT_KEY"
            exit 1
          else
            echo -e "\n‚úÖ Quality Gate aprovado."
          fi

  build-and-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')

    steps:
      - uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda Layer e Function
        run: |
          chmod +x bin/deploy.sh
          ./bin/deploy.sh build

      - name: Deploy Lambda Layer e Function
        run: |
          ./bin/deploy.sh deploy

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-deployment-artifacts
          path: |
            ${{ env.DIST_DIR }}/lambda-function.zip
            ${{ env.DIST_DIR }}/lambda-layer.zip
          retention-days: 30